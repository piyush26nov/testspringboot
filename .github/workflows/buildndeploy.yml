on:
  push:
    branches:
      - main

name: Push to Amazon ECR

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v2
      with:
        java-version: 1.8
    - name: Build with Maven
      run:
        mvn clean package --file pom.xml

    - uses: actions/checkout@v2

    - run: mkdir -p target/

    - run: echo hello > target/testspringboot-0.0.1-SNAPSHOT.jar

    - uses: actions/upload-artifact@v2
      with:
       name: de-sy-file
       path: target/

  deploy:
    name: Deploy
    needs: [build]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2


    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
          name: testspringboot
          path: target/

    - run: cat target/testspringboot-0.0.1-SNAPSHOT.jar
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: myprivaterepo
        IMAGE_TAG:  springboothelloworld:latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
